/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type {
    FunctionFragment,
    Result,
    EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export declare namespace RanceProtocol {
    export type PackagePlanStruct = {
        planId: PromiseOrValue<BytesLike>;
        periodInSeconds: PromiseOrValue<BigNumberish>;
        insuranceFee: PromiseOrValue<BigNumberish>;
        uninsureFee: PromiseOrValue<BigNumberish>;
        isActivated: PromiseOrValue<boolean>;
    };

    export type PackagePlanStructOutput = [
        string,
        number,
        number,
        BigNumber,
        boolean
    ] & {
        planId: string;
        periodInSeconds: number;
        insuranceFee: number;
        uninsureFee: BigNumber;
        isActivated: boolean;
    };

    export type PackageStruct = {
        user: PromiseOrValue<string>;
        planId: PromiseOrValue<BytesLike>;
        packageId: PromiseOrValue<BytesLike>;
        initialDeposit: PromiseOrValue<BigNumberish>;
        insureOutput: PromiseOrValue<BigNumberish>;
        startTimestamp: PromiseOrValue<BigNumberish>;
        endTimestamp: PromiseOrValue<BigNumberish>;
        isCancelled: PromiseOrValue<boolean>;
        isWithdrawn: PromiseOrValue<boolean>;
        insureCoin: PromiseOrValue<string>;
        paymentToken: PromiseOrValue<string>;
    };

    export type PackageStructOutput = [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        string,
        string
    ] & {
        user: string;
        planId: string;
        packageId: string;
        initialDeposit: BigNumber;
        insureOutput: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        isCancelled: boolean;
        isWithdrawn: boolean;
        insureCoin: string;
        paymentToken: string;
    };

    export type ReferralRewardStruct = {
        id: PromiseOrValue<BytesLike>;
        rewardAmount: PromiseOrValue<BigNumberish>;
        timestamp: PromiseOrValue<BigNumberish>;
        token: PromiseOrValue<string>;
        referrer: PromiseOrValue<string>;
        user: PromiseOrValue<string>;
        claimed: PromiseOrValue<boolean>;
    };

    export type ReferralRewardStructOutput = [
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean
    ] & {
        id: string;
        rewardAmount: BigNumber;
        timestamp: BigNumber;
        token: string;
        referrer: string;
        user: string;
        claimed: boolean;
    };
}

export interface RanceProtocolInterface extends utils.Interface {
    functions: {
        "RANCE()": FunctionFragment;
        "addInsureCoins(string[],address[])": FunctionFragment;
        "addPackagePlan(uint32,uint8,uint256)": FunctionFragment;
        "addPaymentToken(string,address)": FunctionFragment;
        "cancel(bytes32)": FunctionFragment;
        "claimReferralReward(bytes32[])": FunctionFragment;
        "deactivatePackagePlan(bytes32)": FunctionFragment;
        "getAllPackagePlans(uint256,uint256)": FunctionFragment;
        "getAllUserPackages(address,uint256,uint256)": FunctionFragment;
        "getAllUserReferrals(address,uint256,uint256)": FunctionFragment;
        "getInsureAmount(bytes32,uint256)": FunctionFragment;
        "getInsureCoins(uint256,uint256)": FunctionFragment;
        "getInsureCoinsLength()": FunctionFragment;
        "getPackagePlansLength()": FunctionFragment;
        "getPaymentTokens(uint256,uint256)": FunctionFragment;
        "getPaymentTokensLength()": FunctionFragment;
        "getTotalInsuranceLocked(address)": FunctionFragment;
        "getUserPackagesLength(address)": FunctionFragment;
        "getUserReferralsLength(address)": FunctionFragment;
        "initialize(address,address,address)": FunctionFragment;
        "insure(bytes32,uint256,address[],string,string)": FunctionFragment;
        "insureCoinAdded(address)": FunctionFragment;
        "insureCoinNameToAddress(string)": FunctionFragment;
        "insureCoins(uint256)": FunctionFragment;
        "insureWithReferrer(bytes32,uint256,address[],string,string,address)": FunctionFragment;
        "isPackageActive((address,bytes32,bytes32,uint256,uint256,uint256,uint256,bool,bool,address,address))": FunctionFragment;
        "owner()": FunctionFragment;
        "packageIdToPackage(bytes32)": FunctionFragment;
        "packagePlanIds(uint256)": FunctionFragment;
        "paymentTokenAdded(address)": FunctionFragment;
        "paymentTokenNameToAddress(string)": FunctionFragment;
        "paymentTokens(uint256)": FunctionFragment;
        "planIdToPackagePlan(bytes32)": FunctionFragment;
        "proxiableUUID()": FunctionFragment;
        "referralPercentage()": FunctionFragment;
        "referrals(bytes32)": FunctionFragment;
        "removeInsureCoins(string[])": FunctionFragment;
        "removePaymentToken(string)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setRance(address)": FunctionFragment;
        "setTreasuryAddress(address)": FunctionFragment;
        "totalInsuranceLocked(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "treasury()": FunctionFragment;
        "uniswapRouter()": FunctionFragment;
        "updateReferralReward(uint256)": FunctionFragment;
        "upgradeTo(address)": FunctionFragment;
        "upgradeToAndCall(address,bytes)": FunctionFragment;
        "userToPackageIds(address,uint256)": FunctionFragment;
        "userToReferralIds(address,uint256)": FunctionFragment;
        "withdraw(bytes32)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "RANCE"
            | "addInsureCoins"
            | "addPackagePlan"
            | "addPaymentToken"
            | "cancel"
            | "claimReferralReward"
            | "deactivatePackagePlan"
            | "getAllPackagePlans"
            | "getAllUserPackages"
            | "getAllUserReferrals"
            | "getInsureAmount"
            | "getInsureCoins"
            | "getInsureCoinsLength"
            | "getPackagePlansLength"
            | "getPaymentTokens"
            | "getPaymentTokensLength"
            | "getTotalInsuranceLocked"
            | "getUserPackagesLength"
            | "getUserReferralsLength"
            | "initialize"
            | "insure"
            | "insureCoinAdded"
            | "insureCoinNameToAddress"
            | "insureCoins"
            | "insureWithReferrer"
            | "isPackageActive"
            | "owner"
            | "packageIdToPackage"
            | "packagePlanIds"
            | "paymentTokenAdded"
            | "paymentTokenNameToAddress"
            | "paymentTokens"
            | "planIdToPackagePlan"
            | "proxiableUUID"
            | "referralPercentage"
            | "referrals"
            | "removeInsureCoins"
            | "removePaymentToken"
            | "renounceOwnership"
            | "setRance"
            | "setTreasuryAddress"
            | "totalInsuranceLocked"
            | "transferOwnership"
            | "treasury"
            | "uniswapRouter"
            | "updateReferralReward"
            | "upgradeTo"
            | "upgradeToAndCall"
            | "userToPackageIds"
            | "userToReferralIds"
            | "withdraw"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "RANCE", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "addInsureCoins",
        values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
    ): string;
    encodeFunctionData(
        functionFragment: "addPackagePlan",
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "addPaymentToken",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "cancel",
        values: [PromiseOrValue<BytesLike>]
    ): string;
    encodeFunctionData(
        functionFragment: "claimReferralReward",
        values: [PromiseOrValue<BytesLike>[]]
    ): string;
    encodeFunctionData(
        functionFragment: "deactivatePackagePlan",
        values: [PromiseOrValue<BytesLike>]
    ): string;
    encodeFunctionData(
        functionFragment: "getAllPackagePlans",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "getAllUserPackages",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "getAllUserReferrals",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "getInsureAmount",
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "getInsureCoins",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "getInsureCoinsLength",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getPackagePlansLength",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getPaymentTokens",
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "getPaymentTokensLength",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "getTotalInsuranceLocked",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getUserPackagesLength",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getUserReferralsLength",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "insure",
        values: [
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>[],
            PromiseOrValue<string>,
            PromiseOrValue<string>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "insureCoinAdded",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "insureCoinNameToAddress",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "insureCoins",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "insureWithReferrer",
        values: [
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>[],
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "isPackageActive",
        values: [RanceProtocol.PackageStruct]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "packageIdToPackage",
        values: [PromiseOrValue<BytesLike>]
    ): string;
    encodeFunctionData(
        functionFragment: "packagePlanIds",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "paymentTokenAdded",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "paymentTokenNameToAddress",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "paymentTokens",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "planIdToPackagePlan",
        values: [PromiseOrValue<BytesLike>]
    ): string;
    encodeFunctionData(
        functionFragment: "proxiableUUID",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "referralPercentage",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "referrals",
        values: [PromiseOrValue<BytesLike>]
    ): string;
    encodeFunctionData(
        functionFragment: "removeInsureCoins",
        values: [PromiseOrValue<string>[]]
    ): string;
    encodeFunctionData(
        functionFragment: "removePaymentToken",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "setRance",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "setTreasuryAddress",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "totalInsuranceLocked",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "treasury",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "uniswapRouter",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "updateReferralReward",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "upgradeTo",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "upgradeToAndCall",
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string;
    encodeFunctionData(
        functionFragment: "userToPackageIds",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "userToReferralIds",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "withdraw",
        values: [PromiseOrValue<BytesLike>]
    ): string;

    decodeFunctionResult(functionFragment: "RANCE", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "addInsureCoins",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "addPackagePlan",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "addPaymentToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "claimReferralReward",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "deactivatePackagePlan",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAllPackagePlans",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAllUserPackages",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getAllUserReferrals",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getInsureAmount",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getInsureCoins",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getInsureCoinsLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPackagePlansLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPaymentTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPaymentTokensLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTotalInsuranceLocked",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getUserPackagesLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getUserReferralsLength",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initialize",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "insure", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "insureCoinAdded",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "insureCoinNameToAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "insureCoins",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "insureWithReferrer",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "isPackageActive",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "packageIdToPackage",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "packagePlanIds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "paymentTokenAdded",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "paymentTokenNameToAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "paymentTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "planIdToPackagePlan",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "proxiableUUID",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "referralPercentage",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "referrals",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeInsureCoins",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "removePaymentToken",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setRance", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "setTreasuryAddress",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "totalInsuranceLocked",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "transferOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "uniswapRouter",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateReferralReward",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "upgradeTo",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "upgradeToAndCall",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "userToPackageIds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "userToReferralIds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

    events: {
        "AdminChanged(address,address)": EventFragment;
        "BeaconUpgraded(address)": EventFragment;
        "Initialized(uint8)": EventFragment;
        "InsuranceActivated(bytes32,address)": EventFragment;
        "InsuranceCancelled(bytes32,address)": EventFragment;
        "InsuranceWithdrawn(bytes32,address)": EventFragment;
        "InsureCoinAdded(string,address)": EventFragment;
        "InsureCoinRemoved(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PackagePlanAdded(bytes32,uint256,uint8,uint32)": EventFragment;
        "PackagePlanDeactivated(bytes32)": EventFragment;
        "PaymentTokenAdded(string,address)": EventFragment;
        "PaymentTokenRemoved(address)": EventFragment;
        "RanceAddressSet(address)": EventFragment;
        "ReferralRewardUpdated(uint256)": EventFragment;
        "Referred(address,address,uint256,uint256)": EventFragment;
        "RewardClaimed(address,bytes32,uint256)": EventFragment;
        "TreasuryAddressSet(address)": EventFragment;
        "Upgraded(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InsuranceActivated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InsuranceCancelled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InsuranceWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InsureCoinAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InsureCoinRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PackagePlanAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PackagePlanDeactivated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentTokenAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentTokenRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RanceAddressSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReferralRewardUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Referred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryAddressSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
    previousAdmin: string;
    newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
    [string, string],
    AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
    beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
    [string],
    BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InsuranceActivatedEventObject {
    _packageId: string;
    _user: string;
}
export type InsuranceActivatedEvent = TypedEvent<
    [string, string],
    InsuranceActivatedEventObject
>;

export type InsuranceActivatedEventFilter =
    TypedEventFilter<InsuranceActivatedEvent>;

export interface InsuranceCancelledEventObject {
    _packageId: string;
    _user: string;
}
export type InsuranceCancelledEvent = TypedEvent<
    [string, string],
    InsuranceCancelledEventObject
>;

export type InsuranceCancelledEventFilter =
    TypedEventFilter<InsuranceCancelledEvent>;

export interface InsuranceWithdrawnEventObject {
    _packageId: string;
    _user: string;
}
export type InsuranceWithdrawnEvent = TypedEvent<
    [string, string],
    InsuranceWithdrawnEventObject
>;

export type InsuranceWithdrawnEventFilter =
    TypedEventFilter<InsuranceWithdrawnEvent>;

export interface InsureCoinAddedEventObject {
    insureCoinName: string;
    insureCoin: string;
}
export type InsureCoinAddedEvent = TypedEvent<
    [string, string],
    InsureCoinAddedEventObject
>;

export type InsureCoinAddedEventFilter = TypedEventFilter<InsureCoinAddedEvent>;

export interface InsureCoinRemovedEventObject {
    insureCoin: string;
}
export type InsureCoinRemovedEvent = TypedEvent<
    [string],
    InsureCoinRemovedEventObject
>;

export type InsureCoinRemovedEventFilter =
    TypedEventFilter<InsureCoinRemovedEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface PackagePlanAddedEventObject {
    _id: string;
    _uninsureFee: BigNumber;
    _insuranceFee: number;
    _periodInSeconds: number;
}
export type PackagePlanAddedEvent = TypedEvent<
    [string, BigNumber, number, number],
    PackagePlanAddedEventObject
>;

export type PackagePlanAddedEventFilter =
    TypedEventFilter<PackagePlanAddedEvent>;

export interface PackagePlanDeactivatedEventObject {
    _id: string;
}
export type PackagePlanDeactivatedEvent = TypedEvent<
    [string],
    PackagePlanDeactivatedEventObject
>;

export type PackagePlanDeactivatedEventFilter =
    TypedEventFilter<PackagePlanDeactivatedEvent>;

export interface PaymentTokenAddedEventObject {
    paymentTokenName: string;
    paymentToken: string;
}
export type PaymentTokenAddedEvent = TypedEvent<
    [string, string],
    PaymentTokenAddedEventObject
>;

export type PaymentTokenAddedEventFilter =
    TypedEventFilter<PaymentTokenAddedEvent>;

export interface PaymentTokenRemovedEventObject {
    paymentToken: string;
}
export type PaymentTokenRemovedEvent = TypedEvent<
    [string],
    PaymentTokenRemovedEventObject
>;

export type PaymentTokenRemovedEventFilter =
    TypedEventFilter<PaymentTokenRemovedEvent>;

export interface RanceAddressSetEventObject {
    _address: string;
}
export type RanceAddressSetEvent = TypedEvent<
    [string],
    RanceAddressSetEventObject
>;

export type RanceAddressSetEventFilter = TypedEventFilter<RanceAddressSetEvent>;

export interface ReferralRewardUpdatedEventObject {
    newPercentage: BigNumber;
}
export type ReferralRewardUpdatedEvent = TypedEvent<
    [BigNumber],
    ReferralRewardUpdatedEventObject
>;

export type ReferralRewardUpdatedEventFilter =
    TypedEventFilter<ReferralRewardUpdatedEvent>;

export interface ReferredEventObject {
    referrer: string;
    user: string;
    amount: BigNumber;
    timestamp: BigNumber;
}
export type ReferredEvent = TypedEvent<
    [string, string, BigNumber, BigNumber],
    ReferredEventObject
>;

export type ReferredEventFilter = TypedEventFilter<ReferredEvent>;

export interface RewardClaimedEventObject {
    user: string;
    referralId: string;
    amount: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
    [string, string, BigNumber],
    RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface TreasuryAddressSetEventObject {
    _address: string;
}
export type TreasuryAddressSetEvent = TypedEvent<
    [string],
    TreasuryAddressSetEventObject
>;

export type TreasuryAddressSetEventFilter =
    TypedEventFilter<TreasuryAddressSetEvent>;

export interface UpgradedEventObject {
    implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface RanceProtocol extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: RanceProtocolInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        RANCE(overrides?: CallOverrides): Promise<[string]>;

        addInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            _tokens: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        addPackagePlan(
            _periodInSeconds: PromiseOrValue<BigNumberish>,
            _insuranceFee: PromiseOrValue<BigNumberish>,
            _uninsureFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        addPaymentToken(
            _tokenName: PromiseOrValue<string>,
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        cancel(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        claimReferralReward(
            _referralIds: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        deactivatePackagePlan(
            _planId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        getAllPackagePlans(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[RanceProtocol.PackagePlanStructOutput[]]>;

        getAllUserPackages(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[RanceProtocol.PackageStructOutput[]]>;

        getAllUserReferrals(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[RanceProtocol.ReferralRewardStructOutput[]]>;

        getInsureAmount(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getInsureCoins(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string[]]>;

        getInsureCoinsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        getPackagePlansLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        getPaymentTokens(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string[]]>;

        getPaymentTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        getTotalInsuranceLocked(
            _token: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getUserPackagesLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        getUserReferralsLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        initialize(
            _treasuryAddress: PromiseOrValue<string>,
            _uniswapRouter: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        insure(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        insureCoinAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        insureCoinNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        insureCoins(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        insureWithReferrer(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            _referrer: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        isPackageActive(
            insurancePackage: RanceProtocol.PackageStruct,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        packageIdToPackage(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
                string,
                string
            ] & {
                user: string;
                planId: string;
                packageId: string;
                initialDeposit: BigNumber;
                insureOutput: BigNumber;
                startTimestamp: BigNumber;
                endTimestamp: BigNumber;
                isCancelled: boolean;
                isWithdrawn: boolean;
                insureCoin: string;
                paymentToken: string;
            }
        >;

        packagePlanIds(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        paymentTokenAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        paymentTokenNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        paymentTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        planIdToPackagePlan(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [string, number, number, BigNumber, boolean] & {
                planId: string;
                periodInSeconds: number;
                insuranceFee: number;
                uninsureFee: BigNumber;
                isActivated: boolean;
            }
        >;

        proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

        referralPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

        referrals(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [string, BigNumber, BigNumber, string, string, string, boolean] & {
                id: string;
                rewardAmount: BigNumber;
                timestamp: BigNumber;
                token: string;
                referrer: string;
                user: string;
                claimed: boolean;
            }
        >;

        removeInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        removePaymentToken(
            _tokenName: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setRance(
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setTreasuryAddress(
            _treasuryAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        totalInsuranceLocked(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        treasury(overrides?: CallOverrides): Promise<[string]>;

        uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

        updateReferralReward(
            _percentage: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        userToPackageIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        userToReferralIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        withdraw(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    RANCE(overrides?: CallOverrides): Promise<string>;

    addInsureCoins(
        _tokenNames: PromiseOrValue<string>[],
        _tokens: PromiseOrValue<string>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPackagePlan(
        _periodInSeconds: PromiseOrValue<BigNumberish>,
        _insuranceFee: PromiseOrValue<BigNumberish>,
        _uninsureFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPaymentToken(
        _tokenName: PromiseOrValue<string>,
        _token: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
        _packageId: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReferralReward(
        _referralIds: PromiseOrValue<BytesLike>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deactivatePackagePlan(
        _planId: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllPackagePlans(
        cursor: PromiseOrValue<BigNumberish>,
        length: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<RanceProtocol.PackagePlanStructOutput[]>;

    getAllUserPackages(
        _user: PromiseOrValue<string>,
        cursor: PromiseOrValue<BigNumberish>,
        length: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<RanceProtocol.PackageStructOutput[]>;

    getAllUserReferrals(
        _user: PromiseOrValue<string>,
        cursor: PromiseOrValue<BigNumberish>,
        length: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<RanceProtocol.ReferralRewardStructOutput[]>;

    getInsureAmount(
        _planId: PromiseOrValue<BytesLike>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInsureCoins(
        cursor: PromiseOrValue<BigNumberish>,
        length: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string[]>;

    getInsureCoinsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPackagePlansLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPaymentTokens(
        cursor: PromiseOrValue<BigNumberish>,
        length: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string[]>;

    getPaymentTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalInsuranceLocked(
        _token: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPackagesLength(
        _user: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReferralsLength(
        _user: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
        _treasuryAddress: PromiseOrValue<string>,
        _uniswapRouter: PromiseOrValue<string>,
        _paymentToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insure(
        _planId: PromiseOrValue<BytesLike>,
        _amount: PromiseOrValue<BigNumberish>,
        path: PromiseOrValue<string>[],
        _insureCoin: PromiseOrValue<string>,
        _paymentToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insureCoinAdded(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>;

    insureCoinNameToAddress(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<string>;

    insureCoins(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    insureWithReferrer(
        _planId: PromiseOrValue<BytesLike>,
        _amount: PromiseOrValue<BigNumberish>,
        path: PromiseOrValue<string>[],
        _insureCoin: PromiseOrValue<string>,
        _paymentToken: PromiseOrValue<string>,
        _referrer: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPackageActive(
        insurancePackage: RanceProtocol.PackageStruct,
        overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    packageIdToPackage(
        arg0: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<
        [
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            boolean,
            boolean,
            string,
            string
        ] & {
            user: string;
            planId: string;
            packageId: string;
            initialDeposit: BigNumber;
            insureOutput: BigNumber;
            startTimestamp: BigNumber;
            endTimestamp: BigNumber;
            isCancelled: boolean;
            isWithdrawn: boolean;
            insureCoin: string;
            paymentToken: string;
        }
    >;

    packagePlanIds(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    paymentTokenAdded(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>;

    paymentTokenNameToAddress(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<string>;

    paymentTokens(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    planIdToPackagePlan(
        arg0: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<
        [string, number, number, BigNumber, boolean] & {
            planId: string;
            periodInSeconds: number;
            insuranceFee: number;
            uninsureFee: BigNumber;
            isActivated: boolean;
        }
    >;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    referralPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    referrals(
        arg0: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<
        [string, BigNumber, BigNumber, string, string, string, boolean] & {
            id: string;
            rewardAmount: BigNumber;
            timestamp: BigNumber;
            token: string;
            referrer: string;
            user: string;
            claimed: boolean;
        }
    >;

    removeInsureCoins(
        _tokenNames: PromiseOrValue<string>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePaymentToken(
        _tokenName: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRance(
        _token: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
        _treasuryAddress: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalInsuranceLocked(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<string>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    updateReferralReward(
        _percentage: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
        newImplementation: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
        newImplementation: PromiseOrValue<string>,
        data: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userToPackageIds(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    userToReferralIds(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
        _packageId: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        RANCE(overrides?: CallOverrides): Promise<string>;

        addInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            _tokens: PromiseOrValue<string>[],
            overrides?: CallOverrides
        ): Promise<void>;

        addPackagePlan(
            _periodInSeconds: PromiseOrValue<BigNumberish>,
            _insuranceFee: PromiseOrValue<BigNumberish>,
            _uninsureFee: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        addPaymentToken(
            _tokenName: PromiseOrValue<string>,
            _token: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        cancel(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        claimReferralReward(
            _referralIds: PromiseOrValue<BytesLike>[],
            overrides?: CallOverrides
        ): Promise<void>;

        deactivatePackagePlan(
            _planId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        getAllPackagePlans(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<RanceProtocol.PackagePlanStructOutput[]>;

        getAllUserPackages(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<RanceProtocol.PackageStructOutput[]>;

        getAllUserReferrals(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<RanceProtocol.ReferralRewardStructOutput[]>;

        getInsureAmount(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getInsureCoins(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string[]>;

        getInsureCoinsLength(overrides?: CallOverrides): Promise<BigNumber>;

        getPackagePlansLength(overrides?: CallOverrides): Promise<BigNumber>;

        getPaymentTokens(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string[]>;

        getPaymentTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalInsuranceLocked(
            _token: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getUserPackagesLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getUserReferralsLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        initialize(
            _treasuryAddress: PromiseOrValue<string>,
            _uniswapRouter: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        insure(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        insureCoinAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>;

        insureCoinNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<string>;

        insureCoins(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        insureWithReferrer(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            _referrer: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        isPackageActive(
            insurancePackage: RanceProtocol.PackageStruct,
            overrides?: CallOverrides
        ): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        packageIdToPackage(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [
                string,
                string,
                string,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                boolean,
                boolean,
                string,
                string
            ] & {
                user: string;
                planId: string;
                packageId: string;
                initialDeposit: BigNumber;
                insureOutput: BigNumber;
                startTimestamp: BigNumber;
                endTimestamp: BigNumber;
                isCancelled: boolean;
                isWithdrawn: boolean;
                insureCoin: string;
                paymentToken: string;
            }
        >;

        packagePlanIds(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        paymentTokenAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>;

        paymentTokenNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<string>;

        paymentTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        planIdToPackagePlan(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [string, number, number, BigNumber, boolean] & {
                planId: string;
                periodInSeconds: number;
                insuranceFee: number;
                uninsureFee: BigNumber;
                isActivated: boolean;
            }
        >;

        proxiableUUID(overrides?: CallOverrides): Promise<string>;

        referralPercentage(overrides?: CallOverrides): Promise<BigNumber>;

        referrals(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<
            [string, BigNumber, BigNumber, string, string, string, boolean] & {
                id: string;
                rewardAmount: BigNumber;
                timestamp: BigNumber;
                token: string;
                referrer: string;
                user: string;
                claimed: boolean;
            }
        >;

        removeInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            overrides?: CallOverrides
        ): Promise<void>;

        removePaymentToken(
            _tokenName: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        setRance(
            _token: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        setTreasuryAddress(
            _treasuryAddress: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        totalInsuranceLocked(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        treasury(overrides?: CallOverrides): Promise<string>;

        uniswapRouter(overrides?: CallOverrides): Promise<string>;

        updateReferralReward(
            _percentage: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;

        userToPackageIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        userToReferralIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>;

        withdraw(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "AdminChanged(address,address)"(
            previousAdmin?: null,
            newAdmin?: null
        ): AdminChangedEventFilter;
        AdminChanged(
            previousAdmin?: null,
            newAdmin?: null
        ): AdminChangedEventFilter;

        "BeaconUpgraded(address)"(
            beacon?: PromiseOrValue<string> | null
        ): BeaconUpgradedEventFilter;
        BeaconUpgraded(
            beacon?: PromiseOrValue<string> | null
        ): BeaconUpgradedEventFilter;

        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;

        "InsuranceActivated(bytes32,address)"(
            _packageId?: PromiseOrValue<BytesLike> | null,
            _user?: PromiseOrValue<string> | null
        ): InsuranceActivatedEventFilter;
        InsuranceActivated(
            _packageId?: PromiseOrValue<BytesLike> | null,
            _user?: PromiseOrValue<string> | null
        ): InsuranceActivatedEventFilter;

        "InsuranceCancelled(bytes32,address)"(
            _packageId?: PromiseOrValue<BytesLike> | null,
            _user?: PromiseOrValue<string> | null
        ): InsuranceCancelledEventFilter;
        InsuranceCancelled(
            _packageId?: PromiseOrValue<BytesLike> | null,
            _user?: PromiseOrValue<string> | null
        ): InsuranceCancelledEventFilter;

        "InsuranceWithdrawn(bytes32,address)"(
            _packageId?: PromiseOrValue<BytesLike> | null,
            _user?: PromiseOrValue<string> | null
        ): InsuranceWithdrawnEventFilter;
        InsuranceWithdrawn(
            _packageId?: PromiseOrValue<BytesLike> | null,
            _user?: PromiseOrValue<string> | null
        ): InsuranceWithdrawnEventFilter;

        "InsureCoinAdded(string,address)"(
            insureCoinName?: null,
            insureCoin?: PromiseOrValue<string> | null
        ): InsureCoinAddedEventFilter;
        InsureCoinAdded(
            insureCoinName?: null,
            insureCoin?: PromiseOrValue<string> | null
        ): InsureCoinAddedEventFilter;

        "InsureCoinRemoved(address)"(
            insureCoin?: PromiseOrValue<string> | null
        ): InsureCoinRemovedEventFilter;
        InsureCoinRemoved(
            insureCoin?: PromiseOrValue<string> | null
        ): InsureCoinRemovedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;

        "PackagePlanAdded(bytes32,uint256,uint8,uint32)"(
            _id?: PromiseOrValue<BytesLike> | null,
            _uninsureFee?: PromiseOrValue<BigNumberish> | null,
            _insuranceFee?: PromiseOrValue<BigNumberish> | null,
            _periodInSeconds?: null
        ): PackagePlanAddedEventFilter;
        PackagePlanAdded(
            _id?: PromiseOrValue<BytesLike> | null,
            _uninsureFee?: PromiseOrValue<BigNumberish> | null,
            _insuranceFee?: PromiseOrValue<BigNumberish> | null,
            _periodInSeconds?: null
        ): PackagePlanAddedEventFilter;

        "PackagePlanDeactivated(bytes32)"(
            _id?: PromiseOrValue<BytesLike> | null
        ): PackagePlanDeactivatedEventFilter;
        PackagePlanDeactivated(
            _id?: PromiseOrValue<BytesLike> | null
        ): PackagePlanDeactivatedEventFilter;

        "PaymentTokenAdded(string,address)"(
            paymentTokenName?: null,
            paymentToken?: PromiseOrValue<string> | null
        ): PaymentTokenAddedEventFilter;
        PaymentTokenAdded(
            paymentTokenName?: null,
            paymentToken?: PromiseOrValue<string> | null
        ): PaymentTokenAddedEventFilter;

        "PaymentTokenRemoved(address)"(
            paymentToken?: PromiseOrValue<string> | null
        ): PaymentTokenRemovedEventFilter;
        PaymentTokenRemoved(
            paymentToken?: PromiseOrValue<string> | null
        ): PaymentTokenRemovedEventFilter;

        "RanceAddressSet(address)"(
            _address?: PromiseOrValue<string> | null
        ): RanceAddressSetEventFilter;
        RanceAddressSet(
            _address?: PromiseOrValue<string> | null
        ): RanceAddressSetEventFilter;

        "ReferralRewardUpdated(uint256)"(
            newPercentage?: null
        ): ReferralRewardUpdatedEventFilter;
        ReferralRewardUpdated(
            newPercentage?: null
        ): ReferralRewardUpdatedEventFilter;

        "Referred(address,address,uint256,uint256)"(
            referrer?: PromiseOrValue<string> | null,
            user?: PromiseOrValue<string> | null,
            amount?: null,
            timestamp?: null
        ): ReferredEventFilter;
        Referred(
            referrer?: PromiseOrValue<string> | null,
            user?: PromiseOrValue<string> | null,
            amount?: null,
            timestamp?: null
        ): ReferredEventFilter;

        "RewardClaimed(address,bytes32,uint256)"(
            user?: PromiseOrValue<string> | null,
            referralId?: PromiseOrValue<BytesLike> | null,
            amount?: null
        ): RewardClaimedEventFilter;
        RewardClaimed(
            user?: PromiseOrValue<string> | null,
            referralId?: PromiseOrValue<BytesLike> | null,
            amount?: null
        ): RewardClaimedEventFilter;

        "TreasuryAddressSet(address)"(
            _address?: PromiseOrValue<string> | null
        ): TreasuryAddressSetEventFilter;
        TreasuryAddressSet(
            _address?: PromiseOrValue<string> | null
        ): TreasuryAddressSetEventFilter;

        "Upgraded(address)"(
            implementation?: PromiseOrValue<string> | null
        ): UpgradedEventFilter;
        Upgraded(
            implementation?: PromiseOrValue<string> | null
        ): UpgradedEventFilter;
    };

    estimateGas: {
        RANCE(overrides?: CallOverrides): Promise<BigNumber>;

        addInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            _tokens: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        addPackagePlan(
            _periodInSeconds: PromiseOrValue<BigNumberish>,
            _insuranceFee: PromiseOrValue<BigNumberish>,
            _uninsureFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        addPaymentToken(
            _tokenName: PromiseOrValue<string>,
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        cancel(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        claimReferralReward(
            _referralIds: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        deactivatePackagePlan(
            _planId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        getAllPackagePlans(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getAllUserPackages(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getAllUserReferrals(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getInsureAmount(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getInsureCoins(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getInsureCoinsLength(overrides?: CallOverrides): Promise<BigNumber>;

        getPackagePlansLength(overrides?: CallOverrides): Promise<BigNumber>;

        getPaymentTokens(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPaymentTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

        getTotalInsuranceLocked(
            _token: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getUserPackagesLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getUserReferralsLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        initialize(
            _treasuryAddress: PromiseOrValue<string>,
            _uniswapRouter: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        insure(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        insureCoinAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        insureCoinNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        insureCoins(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        insureWithReferrer(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            _referrer: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        isPackageActive(
            insurancePackage: RanceProtocol.PackageStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        packageIdToPackage(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        packagePlanIds(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        paymentTokenAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        paymentTokenNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        paymentTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        planIdToPackagePlan(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

        referralPercentage(overrides?: CallOverrides): Promise<BigNumber>;

        referrals(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        removeInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        removePaymentToken(
            _tokenName: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setRance(
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setTreasuryAddress(
            _treasuryAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        totalInsuranceLocked(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        treasury(overrides?: CallOverrides): Promise<BigNumber>;

        uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

        updateReferralReward(
            _percentage: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        userToPackageIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        userToReferralIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        withdraw(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        RANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        addInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            _tokens: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        addPackagePlan(
            _periodInSeconds: PromiseOrValue<BigNumberish>,
            _insuranceFee: PromiseOrValue<BigNumberish>,
            _uninsureFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        addPaymentToken(
            _tokenName: PromiseOrValue<string>,
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        cancel(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        claimReferralReward(
            _referralIds: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        deactivatePackagePlan(
            _planId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        getAllPackagePlans(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getAllUserPackages(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getAllUserReferrals(
            _user: PromiseOrValue<string>,
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getInsureAmount(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getInsureCoins(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getInsureCoinsLength(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPackagePlansLength(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPaymentTokens(
            cursor: PromiseOrValue<BigNumberish>,
            length: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPaymentTokensLength(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getTotalInsuranceLocked(
            _token: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getUserPackagesLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getUserReferralsLength(
            _user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initialize(
            _treasuryAddress: PromiseOrValue<string>,
            _uniswapRouter: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        insure(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        insureCoinAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        insureCoinNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        insureCoins(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        insureWithReferrer(
            _planId: PromiseOrValue<BytesLike>,
            _amount: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<string>[],
            _insureCoin: PromiseOrValue<string>,
            _paymentToken: PromiseOrValue<string>,
            _referrer: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        isPackageActive(
            insurancePackage: RanceProtocol.PackageStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        packageIdToPackage(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        packagePlanIds(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        paymentTokenAdded(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        paymentTokenNameToAddress(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        paymentTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        planIdToPackagePlan(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        referralPercentage(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        referrals(
            arg0: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        removeInsureCoins(
            _tokenNames: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        removePaymentToken(
            _tokenName: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setRance(
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setTreasuryAddress(
            _treasuryAddress: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        totalInsuranceLocked(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        updateReferralReward(
            _percentage: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        upgradeTo(
            newImplementation: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        upgradeToAndCall(
            newImplementation: PromiseOrValue<string>,
            data: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        userToPackageIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        userToReferralIds(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        withdraw(
            _packageId: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
